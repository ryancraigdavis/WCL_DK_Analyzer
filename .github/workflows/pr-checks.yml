name: PR Deployment Checks

on:
  pull_request:
    branches: [main]

jobs:
  dry-run-backend:
    runs-on: ubuntu-latest
    name: Backend Dry Run

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v3

    - name: Setup Python 3.12 and UV
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Configure AWS credentials for permission check
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_WCL_ANALYZER_PROD }}
      run: |
        # Get AWS credentials from Doppler
        export AWS_ACCESS_KEY_ID=$(doppler secrets get AWS_ACCESS_KEY_ID --plain)
        export AWS_SECRET_ACCESS_KEY=$(doppler secrets get AWS_SECRET_ACCESS_KEY --plain)
        export AWS_DEFAULT_REGION=$(doppler secrets get AWS_DEFAULT_REGION --plain)

        # Configure AWS CLI
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region $AWS_DEFAULT_REGION

    - name: Backend Dependencies Check
      run: |
        cd backend

        # Add UV to PATH
        export PATH="$HOME/.cargo/bin:$PATH"

        # Test UV environment setup
        echo "✅ Testing UV virtual environment creation..."
        uv venv .venv
        source .venv/bin/activate

        # Test dependency installation
        echo "✅ Testing dependency installation..."
        uv sync --dev

        # Test Python imports
        echo "✅ Testing Python imports..."
        cd src
        python -c "
        try:
            import api
            import analysis.unholy_analysis
            import analysis.frost_analysis
            print('✅ All imports successful!')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "

    - name: Backend Lint Check
      run: |
        cd backend
        export PATH="$HOME/.cargo/bin:$PATH"
        source .venv/bin/activate

        echo "✅ Running Ruff linting checks..."
        uv run hatch run lint-check

    - name: Backend Package Check
      run: |
        cd backend
        export PATH="$HOME/.cargo/bin:$PATH"
        source .venv/bin/activate

        echo "✅ Testing Lambda package creation..."
        # Simulate the deploy script package creation without AWS upload
        cd .venv/lib/python3.12/site-packages/
        zip -q -r9 "${GITHUB_WORKSPACE}/test-function.zip" * -x '__pycache__/*' || true

        cd "${GITHUB_WORKSPACE}/backend/src"
        zip -q -u "${GITHUB_WORKSPACE}/test-function.zip" -r . -x '__pycache__/*' || true

        # Check package was created and has reasonable size
        if [ -f "${GITHUB_WORKSPACE}/test-function.zip" ]; then
          size=$(stat -c%s "${GITHUB_WORKSPACE}/test-function.zip")
          echo "✅ Lambda package created successfully (${size} bytes)"
          if [ $size -lt 1000000 ]; then  # Less than 1MB seems too small
            echo "⚠️ Warning: Package seems unusually small"
          fi
        else
          echo "❌ Failed to create Lambda package"
          exit 1
        fi

    - name: AWS Permissions Check
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_WCL_ANALYZER_PROD }}
      run: |
        echo "✅ Testing AWS permissions..."

        # Test S3 Lambda bucket access
        echo "Testing S3 bucket access for Lambda deployment..."
        if aws s3 ls s3://wcl-analyzer-lambda-code/ > /dev/null 2>&1; then
          echo "✅ Can list S3 Lambda bucket"
        else
          echo "❌ Cannot access S3 Lambda bucket: wcl-analyzer-lambda-code"
          exit 1
        fi

        # Test S3 upload permissions with a small test file
        echo "test" > test-permissions.txt
        if aws s3 cp test-permissions.txt s3://wcl-analyzer-lambda-code/test-permissions.txt > /dev/null 2>&1; then
          echo "✅ Can upload to S3 Lambda bucket"
          # Cleanup test file
          aws s3 rm s3://wcl-analyzer-lambda-code/test-permissions.txt > /dev/null 2>&1
        else
          echo "❌ Cannot upload to S3 Lambda bucket - missing s3:PutObject permission"
          exit 1
        fi

        # Test Lambda function access
        export WCL_FUNCTION_NAME=$(doppler secrets get WCL_FUNCTION_NAME --plain)
        if aws lambda get-function --function-name "$WCL_FUNCTION_NAME" > /dev/null 2>&1; then
          echo "✅ Can access Lambda function: $WCL_FUNCTION_NAME"
        else
          echo "⚠️ Cannot access Lambda function (may not exist yet): $WCL_FUNCTION_NAME"
        fi

        # Test CloudFront invalidation permissions
        if aws cloudfront create-invalidation --distribution-id E2QQGL1YVUW0M3 --paths '/test' --output json > /dev/null 2>&1; then
          echo "✅ Can create CloudFront invalidations"
        else
          echo "❌ Cannot create CloudFront invalidations - missing cloudfront:CreateInvalidation permission"
          exit 1
        fi

        rm -f test-permissions.txt

  dry-run-frontend:
    runs-on: ubuntu-latest
    name: Frontend Dry Run

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v3

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock

    - name: Configure AWS credentials for permission check
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_WCL_ANALYZER_PROD }}
      run: |
        # Get AWS credentials from Doppler
        export AWS_ACCESS_KEY_ID=$(doppler secrets get AWS_ACCESS_KEY_ID --plain)
        export AWS_SECRET_ACCESS_KEY=$(doppler secrets get AWS_SECRET_ACCESS_KEY --plain)
        export AWS_DEFAULT_REGION=$(doppler secrets get AWS_DEFAULT_REGION --plain)

        # Configure AWS CLI
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region $AWS_DEFAULT_REGION

    - name: Frontend Dependencies Check
      run: |
        cd frontend
        echo "✅ Installing frontend dependencies..."
        yarn install --frozen-lockfile

    - name: Frontend Build Check
      run: |
        cd frontend
        echo "✅ Testing frontend build..."
        yarn build

        # Check build output
        if [ -d "dist" ]; then
          echo "✅ Frontend build successful"
          echo "Build contents:"
          ls -la dist/
        else
          echo "❌ Frontend build failed - no dist directory"
          exit 1
        fi

    - name: Frontend AWS Permissions Check
      run: |
        echo "✅ Testing frontend AWS permissions..."

        # Test S3 frontend bucket access
        echo "Testing S3 bucket access for frontend deployment..."
        if aws s3 ls s3://wcl-analyzer-frontend/ > /dev/null 2>&1; then
          echo "✅ Can list S3 frontend bucket"
        else
          echo "❌ Cannot access S3 frontend bucket: wcl-analyzer-frontend"
          exit 1
        fi

        # Test S3 upload permissions with a small test file
        echo "test" > test-frontend-permissions.txt
        if aws s3 cp test-frontend-permissions.txt s3://wcl-analyzer-frontend/test-permissions.txt > /dev/null 2>&1; then
          echo "✅ Can upload to S3 frontend bucket"
          # Cleanup test file
          aws s3 rm s3://wcl-analyzer-frontend/test-permissions.txt > /dev/null 2>&1
        else
          echo "❌ Cannot upload to S3 frontend bucket - missing s3:PutObject permission"
          exit 1
        fi

        rm -f test-frontend-permissions.txt

  dry-run-extensions:
    runs-on: ubuntu-latest
    name: Extensions Dry Run

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extensions Package Check
      run: |
        cd extensions
        echo "✅ Testing extension packaging..."

        # Test the deploy script without actually deploying
        chmod +x deploy.sh

        # Run the packaging commands manually to test
        cd src
        zip -r9 ../test-chrome-extension.zip content.js icon_48.png icon_128.png manifest.json

        if [ -f "../test-chrome-extension.zip" ]; then
          echo "✅ Extension packaging successful"
          # Show package contents
          unzip -l ../test-chrome-extension.zip
        else
          echo "❌ Extension packaging failed"
          exit 1
        fi

  summary:
    runs-on: ubuntu-latest
    needs: [dry-run-backend, dry-run-frontend, dry-run-extensions]
    name: Deployment Readiness Summary

    steps:
    - name: All Checks Passed
      run: |
        echo "🎉 All deployment checks passed!"
        echo "✅ Backend: Dependencies, linting, and packaging"
        echo "✅ Frontend: Dependencies and build"
        echo "✅ Extensions: Packaging"
        echo ""
        echo "This PR is ready for deployment! 🚀"