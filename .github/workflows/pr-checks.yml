name: PR Deployment Checks

on:
  pull_request:
    branches: [main]

jobs:
  dry-run-backend:
    runs-on: ubuntu-latest
    name: Backend Dry Run

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python 3.12 and UV
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Backend Dependencies Check
      run: |
        cd backend

        # Add UV to PATH
        export PATH="$HOME/.cargo/bin:$PATH"

        # Test UV environment setup
        echo "‚úÖ Testing UV virtual environment creation..."
        uv venv .venv
        source .venv/bin/activate

        # Test dependency installation
        echo "‚úÖ Testing dependency installation..."
        uv sync --dev

        # Test Python imports
        echo "‚úÖ Testing Python imports..."
        cd src
        python -c "
        try:
            import api
            import analysis.unholy_analysis
            import analysis.frost_analysis
            print('‚úÖ All imports successful!')
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            exit(1)
        "

    - name: Backend Lint Check
      run: |
        cd backend
        export PATH="$HOME/.cargo/bin:$PATH"
        source .venv/bin/activate

        echo "‚úÖ Running Ruff linting checks..."
        uv run hatch run lint-check

    - name: Backend Package Check
      run: |
        cd backend
        export PATH="$HOME/.cargo/bin:$PATH"
        source .venv/bin/activate

        echo "‚úÖ Testing Lambda package creation..."
        # Simulate the deploy script package creation without AWS upload
        cd .venv/lib/python3.12/site-packages/
        zip -q -r9 "${GITHUB_WORKSPACE}/test-function.zip" * -x '__pycache__/*' || true

        cd "${GITHUB_WORKSPACE}/backend/src"
        zip -q -u "${GITHUB_WORKSPACE}/test-function.zip" -r . -x '__pycache__/*' || true

        # Check package was created and has reasonable size
        if [ -f "${GITHUB_WORKSPACE}/test-function.zip" ]; then
          size=$(stat -c%s "${GITHUB_WORKSPACE}/test-function.zip")
          echo "‚úÖ Lambda package created successfully (${size} bytes)"
          if [ $size -lt 1000000 ]; then  # Less than 1MB seems too small
            echo "‚ö†Ô∏è Warning: Package seems unusually small"
          fi
        else
          echo "‚ùå Failed to create Lambda package"
          exit 1
        fi

  dry-run-frontend:
    runs-on: ubuntu-latest
    name: Frontend Dry Run

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock

    - name: Frontend Dependencies Check
      run: |
        cd frontend
        echo "‚úÖ Installing frontend dependencies..."
        yarn install --frozen-lockfile

    - name: Frontend Build Check
      run: |
        cd frontend
        echo "‚úÖ Testing frontend build..."
        yarn build

        # Check build output
        if [ -d "dist" ]; then
          echo "‚úÖ Frontend build successful"
          echo "Build contents:"
          ls -la dist/
        else
          echo "‚ùå Frontend build failed - no dist directory"
          exit 1
        fi

  dry-run-extensions:
    runs-on: ubuntu-latest
    name: Extensions Dry Run

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extensions Package Check
      run: |
        cd extensions
        echo "‚úÖ Testing extension packaging..."

        # Test the deploy script without actually deploying
        chmod +x deploy.sh

        # Run the packaging commands manually to test
        cd src
        zip -r9 ../test-chrome-extension.zip content.js icon_48.png icon_128.png manifest.json

        if [ -f "../test-chrome-extension.zip" ]; then
          echo "‚úÖ Extension packaging successful"
          # Show package contents
          unzip -l ../test-chrome-extension.zip
        else
          echo "‚ùå Extension packaging failed"
          exit 1
        fi

  summary:
    runs-on: ubuntu-latest
    needs: [dry-run-backend, dry-run-frontend, dry-run-extensions]
    name: Deployment Readiness Summary

    steps:
    - name: All Checks Passed
      run: |
        echo "üéâ All deployment checks passed!"
        echo "‚úÖ Backend: Dependencies, linting, and packaging"
        echo "‚úÖ Frontend: Dependencies and build"
        echo "‚úÖ Extensions: Packaging"
        echo ""
        echo "This PR is ready for deployment! üöÄ"